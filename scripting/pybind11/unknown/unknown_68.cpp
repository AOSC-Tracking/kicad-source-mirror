#include <memory> // std::allocator
#include <sstream> // __str__
#include <string> // std::basic_string
#include <string> // std::char_traits
#include <wx/dc.h> // wxDC
#include <wx/dc.h> // wxDCImpl
#include <wx/dc.h> // wxDrawObject
#include <wx/dc.h> // wxFloodFillStyle
#include <wx/dc.h> // wxFontMetrics
#include <wx/dc.h> // wxMappingMode
#include <wx/dc.h> // wxRasterOperationMode

#include <pybind11/pybind11.h>
#include <functional>
#include <string>

#ifndef BINDER_PYBIND11_TYPE_CASTER
	#define BINDER_PYBIND11_TYPE_CASTER
	PYBIND11_DECLARE_HOLDER_TYPE(T, std::shared_ptr<T>);
	PYBIND11_DECLARE_HOLDER_TYPE(T, T*);
	PYBIND11_MAKE_OPAQUE(std::shared_ptr<void>);
#endif

void bind_unknown_unknown_68(std::function< pybind11::module &(std::string const &namespace_) > &M)
{
	{ // wxWindowBase file: line:173
		pybind11::class_<wxWindowBase, std::shared_ptr<wxWindowBase>, wxEvtHandler> cl(M(""), "wxWindowBase", "");
		cl.def("Close", [](wxWindowBase &o) -> bool { return o.Close(); }, "");
		cl.def("Close", (bool (wxWindowBase::*)(bool)) &wxWindowBase::Close, "C++: wxWindowBase::Close(bool) --> bool", pybind11::arg("force"));
		cl.def("Destroy", (bool (wxWindowBase::*)()) &wxWindowBase::Destroy, "C++: wxWindowBase::Destroy() --> bool");
		cl.def("DestroyChildren", (bool (wxWindowBase::*)()) &wxWindowBase::DestroyChildren, "C++: wxWindowBase::DestroyChildren() --> bool");
		cl.def("IsBeingDeleted", (bool (wxWindowBase::*)() const) &wxWindowBase::IsBeingDeleted, "C++: wxWindowBase::IsBeingDeleted() const --> bool");
		cl.def("SetLabel", (void (wxWindowBase::*)(const class wxString &)) &wxWindowBase::SetLabel, "C++: wxWindowBase::SetLabel(const class wxString &) --> void", pybind11::arg("label"));
		cl.def("GetLabel", (class wxString (wxWindowBase::*)() const) &wxWindowBase::GetLabel, "C++: wxWindowBase::GetLabel() const --> class wxString");
		cl.def("SetName", (void (wxWindowBase::*)(const class wxString &)) &wxWindowBase::SetName, "C++: wxWindowBase::SetName(const class wxString &) --> void", pybind11::arg("name"));
		cl.def("GetName", (class wxString (wxWindowBase::*)() const) &wxWindowBase::GetName, "C++: wxWindowBase::GetName() const --> class wxString");
		cl.def("SetWindowVariant", (void (wxWindowBase::*)(enum wxWindowVariant)) &wxWindowBase::SetWindowVariant, "C++: wxWindowBase::SetWindowVariant(enum wxWindowVariant) --> void", pybind11::arg("variant"));
		cl.def("GetWindowVariant", (enum wxWindowVariant (wxWindowBase::*)() const) &wxWindowBase::GetWindowVariant, "C++: wxWindowBase::GetWindowVariant() const --> enum wxWindowVariant");
		cl.def("GetLayoutDirection", (enum wxLayoutDirection (wxWindowBase::*)() const) &wxWindowBase::GetLayoutDirection, "C++: wxWindowBase::GetLayoutDirection() const --> enum wxLayoutDirection");
		cl.def("SetLayoutDirection", (void (wxWindowBase::*)(enum wxLayoutDirection)) &wxWindowBase::SetLayoutDirection, "C++: wxWindowBase::SetLayoutDirection(enum wxLayoutDirection) --> void", pybind11::arg(""));
		cl.def("AdjustForLayoutDirection", (int (wxWindowBase::*)(int, int, int) const) &wxWindowBase::AdjustForLayoutDirection, "C++: wxWindowBase::AdjustForLayoutDirection(int, int, int) const --> int", pybind11::arg("x"), pybind11::arg("width"), pybind11::arg("widthTotal"));
		cl.def("SetId", (void (wxWindowBase::*)(int)) &wxWindowBase::SetId, "C++: wxWindowBase::SetId(int) --> void", pybind11::arg("winid"));
		cl.def("GetId", (int (wxWindowBase::*)() const) &wxWindowBase::GetId, "C++: wxWindowBase::GetId() const --> int");
		cl.def_static("NewControlId", []() -> int { return wxWindowBase::NewControlId(); }, "");
		cl.def_static("NewControlId", (int (*)(int)) &wxWindowBase::NewControlId, "C++: wxWindowBase::NewControlId(int) --> int", pybind11::arg("count"));
		cl.def_static("UnreserveControlId", [](int const & a0) -> void { return wxWindowBase::UnreserveControlId(a0); }, "", pybind11::arg("id"));
		cl.def_static("UnreserveControlId", (void (*)(int, int)) &wxWindowBase::UnreserveControlId, "C++: wxWindowBase::UnreserveControlId(int, int) --> void", pybind11::arg("id"), pybind11::arg("count"));
		cl.def("SetSize", [](wxWindowBase &o, int const & a0, int const & a1, int const & a2, int const & a3) -> void { return o.SetSize(a0, a1, a2, a3); }, "", pybind11::arg("x"), pybind11::arg("y"), pybind11::arg("width"), pybind11::arg("height"));
		cl.def("SetSize", (void (wxWindowBase::*)(int, int, int, int, int)) &wxWindowBase::SetSize, "C++: wxWindowBase::SetSize(int, int, int, int, int) --> void", pybind11::arg("x"), pybind11::arg("y"), pybind11::arg("width"), pybind11::arg("height"), pybind11::arg("sizeFlags"));
		cl.def("SetSize", (void (wxWindowBase::*)(int, int)) &wxWindowBase::SetSize, "C++: wxWindowBase::SetSize(int, int) --> void", pybind11::arg("width"), pybind11::arg("height"));
		cl.def("SetSize", (void (wxWindowBase::*)(const class wxSize &)) &wxWindowBase::SetSize, "C++: wxWindowBase::SetSize(const class wxSize &) --> void", pybind11::arg("size"));
		cl.def("SetSize", [](wxWindowBase &o, const class wxRect & a0) -> void { return o.SetSize(a0); }, "", pybind11::arg("rect"));
		cl.def("SetSize", (void (wxWindowBase::*)(const class wxRect &, int)) &wxWindowBase::SetSize, "C++: wxWindowBase::SetSize(const class wxRect &, int) --> void", pybind11::arg("rect"), pybind11::arg("sizeFlags"));
		cl.def("Move", [](wxWindowBase &o, int const & a0, int const & a1) -> void { return o.Move(a0, a1); }, "", pybind11::arg("x"), pybind11::arg("y"));
		cl.def("Move", (void (wxWindowBase::*)(int, int, int)) &wxWindowBase::Move, "C++: wxWindowBase::Move(int, int, int) --> void", pybind11::arg("x"), pybind11::arg("y"), pybind11::arg("flags"));
		cl.def("Move", [](wxWindowBase &o, const class wxPoint & a0) -> void { return o.Move(a0); }, "", pybind11::arg("pt"));
		cl.def("Move", (void (wxWindowBase::*)(const class wxPoint &, int)) &wxWindowBase::Move, "C++: wxWindowBase::Move(const class wxPoint &, int) --> void", pybind11::arg("pt"), pybind11::arg("flags"));
		cl.def("SetPosition", (void (wxWindowBase::*)(const class wxPoint &)) &wxWindowBase::SetPosition, "C++: wxWindowBase::SetPosition(const class wxPoint &) --> void", pybind11::arg("pt"));
		cl.def("Raise", (void (wxWindowBase::*)()) &wxWindowBase::Raise, "C++: wxWindowBase::Raise() --> void");
		cl.def("Lower", (void (wxWindowBase::*)()) &wxWindowBase::Lower, "C++: wxWindowBase::Lower() --> void");
		cl.def("SetClientSize", (void (wxWindowBase::*)(int, int)) &wxWindowBase::SetClientSize, "C++: wxWindowBase::SetClientSize(int, int) --> void", pybind11::arg("width"), pybind11::arg("height"));
		cl.def("SetClientSize", (void (wxWindowBase::*)(const class wxSize &)) &wxWindowBase::SetClientSize, "C++: wxWindowBase::SetClientSize(const class wxSize &) --> void", pybind11::arg("size"));
		cl.def("SetClientSize", (void (wxWindowBase::*)(const class wxRect &)) &wxWindowBase::SetClientSize, "C++: wxWindowBase::SetClientSize(const class wxRect &) --> void", pybind11::arg("rect"));
		cl.def("GetPosition", (void (wxWindowBase::*)(int *, int *) const) &wxWindowBase::GetPosition, "C++: wxWindowBase::GetPosition(int *, int *) const --> void", pybind11::arg("x"), pybind11::arg("y"));
		cl.def("GetPosition", (class wxPoint (wxWindowBase::*)() const) &wxWindowBase::GetPosition, "C++: wxWindowBase::GetPosition() const --> class wxPoint");
		cl.def("GetScreenPosition", (void (wxWindowBase::*)(int *, int *) const) &wxWindowBase::GetScreenPosition, "C++: wxWindowBase::GetScreenPosition(int *, int *) const --> void", pybind11::arg("x"), pybind11::arg("y"));
		cl.def("GetScreenPosition", (class wxPoint (wxWindowBase::*)() const) &wxWindowBase::GetScreenPosition, "C++: wxWindowBase::GetScreenPosition() const --> class wxPoint");
		cl.def("GetSize", (void (wxWindowBase::*)(int *, int *) const) &wxWindowBase::GetSize, "C++: wxWindowBase::GetSize(int *, int *) const --> void", pybind11::arg("w"), pybind11::arg("h"));
		cl.def("GetSize", (class wxSize (wxWindowBase::*)() const) &wxWindowBase::GetSize, "C++: wxWindowBase::GetSize() const --> class wxSize");
		cl.def("GetClientSize", (void (wxWindowBase::*)(int *, int *) const) &wxWindowBase::GetClientSize, "C++: wxWindowBase::GetClientSize(int *, int *) const --> void", pybind11::arg("w"), pybind11::arg("h"));
		cl.def("GetClientSize", (class wxSize (wxWindowBase::*)() const) &wxWindowBase::GetClientSize, "C++: wxWindowBase::GetClientSize() const --> class wxSize");
		cl.def("GetRect", (class wxRect (wxWindowBase::*)() const) &wxWindowBase::GetRect, "C++: wxWindowBase::GetRect() const --> class wxRect");
		cl.def("GetScreenRect", (class wxRect (wxWindowBase::*)() const) &wxWindowBase::GetScreenRect, "C++: wxWindowBase::GetScreenRect() const --> class wxRect");
		cl.def("GetClientAreaOrigin", (class wxPoint (wxWindowBase::*)() const) &wxWindowBase::GetClientAreaOrigin, "C++: wxWindowBase::GetClientAreaOrigin() const --> class wxPoint");
		cl.def("GetClientRect", (class wxRect (wxWindowBase::*)() const) &wxWindowBase::GetClientRect, "C++: wxWindowBase::GetClientRect() const --> class wxRect");
		cl.def("ClientToWindowSize", (class wxSize (wxWindowBase::*)(const class wxSize &) const) &wxWindowBase::ClientToWindowSize, "C++: wxWindowBase::ClientToWindowSize(const class wxSize &) const --> class wxSize", pybind11::arg("size"));
		cl.def("WindowToClientSize", (class wxSize (wxWindowBase::*)(const class wxSize &) const) &wxWindowBase::WindowToClientSize, "C++: wxWindowBase::WindowToClientSize(const class wxSize &) const --> class wxSize", pybind11::arg("size"));
		cl.def("GetBestSize", (class wxSize (wxWindowBase::*)() const) &wxWindowBase::GetBestSize, "C++: wxWindowBase::GetBestSize() const --> class wxSize");
		cl.def("GetBestSize", (void (wxWindowBase::*)(int *, int *) const) &wxWindowBase::GetBestSize, "C++: wxWindowBase::GetBestSize(int *, int *) const --> void", pybind11::arg("w"), pybind11::arg("h"));
		cl.def("GetBestHeight", (int (wxWindowBase::*)(int) const) &wxWindowBase::GetBestHeight, "C++: wxWindowBase::GetBestHeight(int) const --> int", pybind11::arg("width"));
		cl.def("GetBestWidth", (int (wxWindowBase::*)(int) const) &wxWindowBase::GetBestWidth, "C++: wxWindowBase::GetBestWidth(int) const --> int", pybind11::arg("height"));
		cl.def("InvalidateBestSize", (void (wxWindowBase::*)()) &wxWindowBase::InvalidateBestSize, "C++: wxWindowBase::InvalidateBestSize() --> void");
		cl.def("CacheBestSize", (void (wxWindowBase::*)(const class wxSize &) const) &wxWindowBase::CacheBestSize, "C++: wxWindowBase::CacheBestSize(const class wxSize &) const --> void", pybind11::arg("size"));
		cl.def("GetEffectiveMinSize", (class wxSize (wxWindowBase::*)() const) &wxWindowBase::GetEffectiveMinSize, "C++: wxWindowBase::GetEffectiveMinSize() const --> class wxSize");
		cl.def("GetBestFittingSize", (class wxSize (wxWindowBase::*)() const) &wxWindowBase::GetBestFittingSize, "C++: wxWindowBase::GetBestFittingSize() const --> class wxSize");
		cl.def("GetAdjustedMinSize", (class wxSize (wxWindowBase::*)() const) &wxWindowBase::GetAdjustedMinSize, "C++: wxWindowBase::GetAdjustedMinSize() const --> class wxSize");
		cl.def("SetInitialSize", [](wxWindowBase &o) -> void { return o.SetInitialSize(); }, "");
		cl.def("SetInitialSize", (void (wxWindowBase::*)(const class wxSize &)) &wxWindowBase::SetInitialSize, "C++: wxWindowBase::SetInitialSize(const class wxSize &) --> void", pybind11::arg("size"));
		cl.def("SetBestFittingSize", [](wxWindowBase &o) -> void { return o.SetBestFittingSize(); }, "");
		cl.def("SetBestFittingSize", (void (wxWindowBase::*)(const class wxSize &)) &wxWindowBase::SetBestFittingSize, "C++: wxWindowBase::SetBestFittingSize(const class wxSize &) --> void", pybind11::arg("size"));
		cl.def("Centre", [](wxWindowBase &o) -> void { return o.Centre(); }, "");
		cl.def("Centre", (void (wxWindowBase::*)(int)) &wxWindowBase::Centre, "C++: wxWindowBase::Centre(int) --> void", pybind11::arg("dir"));
		cl.def("Center", [](wxWindowBase &o) -> void { return o.Center(); }, "");
		cl.def("Center", (void (wxWindowBase::*)(int)) &wxWindowBase::Center, "C++: wxWindowBase::Center(int) --> void", pybind11::arg("dir"));
		cl.def("CentreOnParent", [](wxWindowBase &o) -> void { return o.CentreOnParent(); }, "");
		cl.def("CentreOnParent", (void (wxWindowBase::*)(int)) &wxWindowBase::CentreOnParent, "C++: wxWindowBase::CentreOnParent(int) --> void", pybind11::arg("dir"));
		cl.def("CenterOnParent", [](wxWindowBase &o) -> void { return o.CenterOnParent(); }, "");
		cl.def("CenterOnParent", (void (wxWindowBase::*)(int)) &wxWindowBase::CenterOnParent, "C++: wxWindowBase::CenterOnParent(int) --> void", pybind11::arg("dir"));
		cl.def("Fit", (void (wxWindowBase::*)()) &wxWindowBase::Fit, "C++: wxWindowBase::Fit() --> void");
		cl.def("FitInside", (void (wxWindowBase::*)()) &wxWindowBase::FitInside, "C++: wxWindowBase::FitInside() --> void");
		cl.def("SetSizeHints", [](wxWindowBase &o, int const & a0, int const & a1) -> void { return o.SetSizeHints(a0, a1); }, "", pybind11::arg("minW"), pybind11::arg("minH"));
		cl.def("SetSizeHints", [](wxWindowBase &o, int const & a0, int const & a1, int const & a2) -> void { return o.SetSizeHints(a0, a1, a2); }, "", pybind11::arg("minW"), pybind11::arg("minH"), pybind11::arg("maxW"));
		cl.def("SetSizeHints", [](wxWindowBase &o, int const & a0, int const & a1, int const & a2, int const & a3) -> void { return o.SetSizeHints(a0, a1, a2, a3); }, "", pybind11::arg("minW"), pybind11::arg("minH"), pybind11::arg("maxW"), pybind11::arg("maxH"));
		cl.def("SetSizeHints", [](wxWindowBase &o, int const & a0, int const & a1, int const & a2, int const & a3, int const & a4) -> void { return o.SetSizeHints(a0, a1, a2, a3, a4); }, "", pybind11::arg("minW"), pybind11::arg("minH"), pybind11::arg("maxW"), pybind11::arg("maxH"), pybind11::arg("incW"));
		cl.def("SetSizeHints", (void (wxWindowBase::*)(int, int, int, int, int, int)) &wxWindowBase::SetSizeHints, "C++: wxWindowBase::SetSizeHints(int, int, int, int, int, int) --> void", pybind11::arg("minW"), pybind11::arg("minH"), pybind11::arg("maxW"), pybind11::arg("maxH"), pybind11::arg("incW"), pybind11::arg("incH"));
		cl.def("SetSizeHints", [](wxWindowBase &o, const class wxSize & a0) -> void { return o.SetSizeHints(a0); }, "", pybind11::arg("minSize"));
		cl.def("SetSizeHints", [](wxWindowBase &o, const class wxSize & a0, const class wxSize & a1) -> void { return o.SetSizeHints(a0, a1); }, "", pybind11::arg("minSize"), pybind11::arg("maxSize"));
		cl.def("SetSizeHints", (void (wxWindowBase::*)(const class wxSize &, const class wxSize &, const class wxSize &)) &wxWindowBase::SetSizeHints, "C++: wxWindowBase::SetSizeHints(const class wxSize &, const class wxSize &, const class wxSize &) --> void", pybind11::arg("minSize"), pybind11::arg("maxSize"), pybind11::arg("incSize"));
		cl.def("SetVirtualSizeHints", [](wxWindowBase &o, int const & a0, int const & a1) -> void { return o.SetVirtualSizeHints(a0, a1); }, "", pybind11::arg("minW"), pybind11::arg("minH"));
		cl.def("SetVirtualSizeHints", [](wxWindowBase &o, int const & a0, int const & a1, int const & a2) -> void { return o.SetVirtualSizeHints(a0, a1, a2); }, "", pybind11::arg("minW"), pybind11::arg("minH"), pybind11::arg("maxW"));
		cl.def("SetVirtualSizeHints", (void (wxWindowBase::*)(int, int, int, int)) &wxWindowBase::SetVirtualSizeHints, "C++: wxWindowBase::SetVirtualSizeHints(int, int, int, int) --> void", pybind11::arg("minW"), pybind11::arg("minH"), pybind11::arg("maxW"), pybind11::arg("maxH"));
		cl.def("SetVirtualSizeHints", [](wxWindowBase &o, const class wxSize & a0) -> void { return o.SetVirtualSizeHints(a0); }, "", pybind11::arg("minSize"));
		cl.def("SetVirtualSizeHints", (void (wxWindowBase::*)(const class wxSize &, const class wxSize &)) &wxWindowBase::SetVirtualSizeHints, "C++: wxWindowBase::SetVirtualSizeHints(const class wxSize &, const class wxSize &) --> void", pybind11::arg("minSize"), pybind11::arg("maxSize"));
		cl.def("SetMinSize", (void (wxWindowBase::*)(const class wxSize &)) &wxWindowBase::SetMinSize, "C++: wxWindowBase::SetMinSize(const class wxSize &) --> void", pybind11::arg("minSize"));
		cl.def("SetMaxSize", (void (wxWindowBase::*)(const class wxSize &)) &wxWindowBase::SetMaxSize, "C++: wxWindowBase::SetMaxSize(const class wxSize &) --> void", pybind11::arg("maxSize"));
		cl.def("SetMinClientSize", (void (wxWindowBase::*)(const class wxSize &)) &wxWindowBase::SetMinClientSize, "C++: wxWindowBase::SetMinClientSize(const class wxSize &) --> void", pybind11::arg("size"));
		cl.def("SetMaxClientSize", (void (wxWindowBase::*)(const class wxSize &)) &wxWindowBase::SetMaxClientSize, "C++: wxWindowBase::SetMaxClientSize(const class wxSize &) --> void", pybind11::arg("size"));
		cl.def("GetMinSize", (class wxSize (wxWindowBase::*)() const) &wxWindowBase::GetMinSize, "C++: wxWindowBase::GetMinSize() const --> class wxSize");
		cl.def("GetMaxSize", (class wxSize (wxWindowBase::*)() const) &wxWindowBase::GetMaxSize, "C++: wxWindowBase::GetMaxSize() const --> class wxSize");
		cl.def("GetMinClientSize", (class wxSize (wxWindowBase::*)() const) &wxWindowBase::GetMinClientSize, "C++: wxWindowBase::GetMinClientSize() const --> class wxSize");
		cl.def("GetMaxClientSize", (class wxSize (wxWindowBase::*)() const) &wxWindowBase::GetMaxClientSize, "C++: wxWindowBase::GetMaxClientSize() const --> class wxSize");
		cl.def("GetMinWidth", (int (wxWindowBase::*)() const) &wxWindowBase::GetMinWidth, "C++: wxWindowBase::GetMinWidth() const --> int");
		cl.def("GetMinHeight", (int (wxWindowBase::*)() const) &wxWindowBase::GetMinHeight, "C++: wxWindowBase::GetMinHeight() const --> int");
		cl.def("GetMaxWidth", (int (wxWindowBase::*)() const) &wxWindowBase::GetMaxWidth, "C++: wxWindowBase::GetMaxWidth() const --> int");
		cl.def("GetMaxHeight", (int (wxWindowBase::*)() const) &wxWindowBase::GetMaxHeight, "C++: wxWindowBase::GetMaxHeight() const --> int");
		cl.def("SetVirtualSize", (void (wxWindowBase::*)(const class wxSize &)) &wxWindowBase::SetVirtualSize, "C++: wxWindowBase::SetVirtualSize(const class wxSize &) --> void", pybind11::arg("size"));
		cl.def("SetVirtualSize", (void (wxWindowBase::*)(int, int)) &wxWindowBase::SetVirtualSize, "C++: wxWindowBase::SetVirtualSize(int, int) --> void", pybind11::arg("x"), pybind11::arg("y"));
		cl.def("GetVirtualSize", (class wxSize (wxWindowBase::*)() const) &wxWindowBase::GetVirtualSize, "C++: wxWindowBase::GetVirtualSize() const --> class wxSize");
		cl.def("GetVirtualSize", (void (wxWindowBase::*)(int *, int *) const) &wxWindowBase::GetVirtualSize, "C++: wxWindowBase::GetVirtualSize(int *, int *) const --> void", pybind11::arg("x"), pybind11::arg("y"));
		cl.def("DoSetVirtualSize", (void (wxWindowBase::*)(int, int)) &wxWindowBase::DoSetVirtualSize, "C++: wxWindowBase::DoSetVirtualSize(int, int) --> void", pybind11::arg("x"), pybind11::arg("y"));
		cl.def("DoGetVirtualSize", (class wxSize (wxWindowBase::*)() const) &wxWindowBase::DoGetVirtualSize, "C++: wxWindowBase::DoGetVirtualSize() const --> class wxSize");
		cl.def("GetBestVirtualSize", (class wxSize (wxWindowBase::*)() const) &wxWindowBase::GetBestVirtualSize, "C++: wxWindowBase::GetBestVirtualSize() const --> class wxSize");
		cl.def("GetContentScaleFactor", (double (wxWindowBase::*)() const) &wxWindowBase::GetContentScaleFactor, "C++: wxWindowBase::GetContentScaleFactor() const --> double");
		cl.def("GetWindowBorderSize", (class wxSize (wxWindowBase::*)() const) &wxWindowBase::GetWindowBorderSize, "C++: wxWindowBase::GetWindowBorderSize() const --> class wxSize");
		cl.def("InformFirstDirection", (bool (wxWindowBase::*)(int, int, int)) &wxWindowBase::InformFirstDirection, "C++: wxWindowBase::InformFirstDirection(int, int, int) --> bool", pybind11::arg("direction"), pybind11::arg("size"), pybind11::arg("availableOtherDir"));
		cl.def("SendSizeEvent", [](wxWindowBase &o) -> void { return o.SendSizeEvent(); }, "");
		cl.def("SendSizeEvent", (void (wxWindowBase::*)(int)) &wxWindowBase::SendSizeEvent, "C++: wxWindowBase::SendSizeEvent(int) --> void", pybind11::arg("flags"));
		cl.def("SendSizeEventToParent", [](wxWindowBase &o) -> void { return o.SendSizeEventToParent(); }, "");
		cl.def("SendSizeEventToParent", (void (wxWindowBase::*)(int)) &wxWindowBase::SendSizeEventToParent, "C++: wxWindowBase::SendSizeEventToParent(int) --> void", pybind11::arg("flags"));
		cl.def("PostSizeEvent", (void (wxWindowBase::*)()) &wxWindowBase::PostSizeEvent, "C++: wxWindowBase::PostSizeEvent() --> void");
		cl.def("PostSizeEventToParent", (void (wxWindowBase::*)()) &wxWindowBase::PostSizeEventToParent, "C++: wxWindowBase::PostSizeEventToParent() --> void");
		cl.def("BeginRepositioningChildren", (bool (wxWindowBase::*)()) &wxWindowBase::BeginRepositioningChildren, "C++: wxWindowBase::BeginRepositioningChildren() --> bool");
		cl.def("EndRepositioningChildren", (void (wxWindowBase::*)()) &wxWindowBase::EndRepositioningChildren, "C++: wxWindowBase::EndRepositioningChildren() --> void");
		cl.def("Show", [](wxWindowBase &o) -> bool { return o.Show(); }, "");
		cl.def("Show", (bool (wxWindowBase::*)(bool)) &wxWindowBase::Show, "C++: wxWindowBase::Show(bool) --> bool", pybind11::arg("show"));
		cl.def("Hide", (bool (wxWindowBase::*)()) &wxWindowBase::Hide, "C++: wxWindowBase::Hide() --> bool");
		cl.def("ShowWithEffect", [](wxWindowBase &o, enum wxShowEffect const & a0) -> bool { return o.ShowWithEffect(a0); }, "", pybind11::arg(""));
		cl.def("ShowWithEffect", (bool (wxWindowBase::*)(enum wxShowEffect, unsigned int)) &wxWindowBase::ShowWithEffect, "C++: wxWindowBase::ShowWithEffect(enum wxShowEffect, unsigned int) --> bool", pybind11::arg(""), pybind11::arg(""));
		cl.def("HideWithEffect", [](wxWindowBase &o, enum wxShowEffect const & a0) -> bool { return o.HideWithEffect(a0); }, "", pybind11::arg(""));
		cl.def("HideWithEffect", (bool (wxWindowBase::*)(enum wxShowEffect, unsigned int)) &wxWindowBase::HideWithEffect, "C++: wxWindowBase::HideWithEffect(enum wxShowEffect, unsigned int) --> bool", pybind11::arg(""), pybind11::arg(""));
		cl.def("Enable", [](wxWindowBase &o) -> bool { return o.Enable(); }, "");
		cl.def("Enable", (bool (wxWindowBase::*)(bool)) &wxWindowBase::Enable, "C++: wxWindowBase::Enable(bool) --> bool", pybind11::arg("enable"));
		cl.def("Disable", (bool (wxWindowBase::*)()) &wxWindowBase::Disable, "C++: wxWindowBase::Disable() --> bool");
		cl.def("IsShown", (bool (wxWindowBase::*)() const) &wxWindowBase::IsShown, "C++: wxWindowBase::IsShown() const --> bool");
		cl.def("IsEnabled", (bool (wxWindowBase::*)() const) &wxWindowBase::IsEnabled, "C++: wxWindowBase::IsEnabled() const --> bool");
		cl.def("IsThisEnabled", (bool (wxWindowBase::*)() const) &wxWindowBase::IsThisEnabled, "C++: wxWindowBase::IsThisEnabled() const --> bool");
		cl.def("IsShownOnScreen", (bool (wxWindowBase::*)() const) &wxWindowBase::IsShownOnScreen, "C++: wxWindowBase::IsShownOnScreen() const --> bool");
		cl.def("SetWindowStyleFlag", (void (wxWindowBase::*)(long)) &wxWindowBase::SetWindowStyleFlag, "C++: wxWindowBase::SetWindowStyleFlag(long) --> void", pybind11::arg("style"));
		cl.def("GetWindowStyleFlag", (long (wxWindowBase::*)() const) &wxWindowBase::GetWindowStyleFlag, "C++: wxWindowBase::GetWindowStyleFlag() const --> long");
		cl.def("SetWindowStyle", (void (wxWindowBase::*)(long)) &wxWindowBase::SetWindowStyle, "C++: wxWindowBase::SetWindowStyle(long) --> void", pybind11::arg("style"));
		cl.def("GetWindowStyle", (long (wxWindowBase::*)() const) &wxWindowBase::GetWindowStyle, "C++: wxWindowBase::GetWindowStyle() const --> long");
		cl.def("HasFlag", (bool (wxWindowBase::*)(int) const) &wxWindowBase::HasFlag, "C++: wxWindowBase::HasFlag(int) const --> bool", pybind11::arg("flag"));
		cl.def("IsRetained", (bool (wxWindowBase::*)() const) &wxWindowBase::IsRetained, "C++: wxWindowBase::IsRetained() const --> bool");
		cl.def("ToggleWindowStyle", (bool (wxWindowBase::*)(int)) &wxWindowBase::ToggleWindowStyle, "C++: wxWindowBase::ToggleWindowStyle(int) --> bool", pybind11::arg("flag"));
		cl.def("SetExtraStyle", (void (wxWindowBase::*)(long)) &wxWindowBase::SetExtraStyle, "C++: wxWindowBase::SetExtraStyle(long) --> void", pybind11::arg("exStyle"));
		cl.def("GetExtraStyle", (long (wxWindowBase::*)() const) &wxWindowBase::GetExtraStyle, "C++: wxWindowBase::GetExtraStyle() const --> long");
		cl.def("HasExtraStyle", (bool (wxWindowBase::*)(int) const) &wxWindowBase::HasExtraStyle, "C++: wxWindowBase::HasExtraStyle(int) const --> bool", pybind11::arg("exFlag"));
		cl.def("MakeModal", [](wxWindowBase &o) -> void { return o.MakeModal(); }, "");
		cl.def("MakeModal", (void (wxWindowBase::*)(bool)) &wxWindowBase::MakeModal, "C++: wxWindowBase::MakeModal(bool) --> void", pybind11::arg("modal"));
		cl.def("SetThemeEnabled", (void (wxWindowBase::*)(bool)) &wxWindowBase::SetThemeEnabled, "C++: wxWindowBase::SetThemeEnabled(bool) --> void", pybind11::arg("enableTheme"));
		cl.def("GetThemeEnabled", (bool (wxWindowBase::*)() const) &wxWindowBase::GetThemeEnabled, "C++: wxWindowBase::GetThemeEnabled() const --> bool");
		cl.def("SetFocus", (void (wxWindowBase::*)()) &wxWindowBase::SetFocus, "C++: wxWindowBase::SetFocus() --> void");
		cl.def("SetFocusFromKbd", (void (wxWindowBase::*)()) &wxWindowBase::SetFocusFromKbd, "C++: wxWindowBase::SetFocusFromKbd() --> void");
		cl.def_static("FindFocus", (class wxWindow * (*)()) &wxWindowBase::FindFocus, "C++: wxWindowBase::FindFocus() --> class wxWindow *", pybind11::return_value_policy::automatic);
		cl.def_static("DoFindFocus", (class wxWindow * (*)()) &wxWindowBase::DoFindFocus, "C++: wxWindowBase::DoFindFocus() --> class wxWindow *", pybind11::return_value_policy::automatic);
		cl.def("HasFocus", (bool (wxWindowBase::*)() const) &wxWindowBase::HasFocus, "C++: wxWindowBase::HasFocus() const --> bool");
		cl.def("AcceptsFocus", (bool (wxWindowBase::*)() const) &wxWindowBase::AcceptsFocus, "C++: wxWindowBase::AcceptsFocus() const --> bool");
		cl.def("AcceptsFocusRecursively", (bool (wxWindowBase::*)() const) &wxWindowBase::AcceptsFocusRecursively, "C++: wxWindowBase::AcceptsFocusRecursively() const --> bool");
		cl.def("AcceptsFocusFromKeyboard", (bool (wxWindowBase::*)() const) &wxWindowBase::AcceptsFocusFromKeyboard, "C++: wxWindowBase::AcceptsFocusFromKeyboard() const --> bool");
		cl.def("CanBeFocused", (bool (wxWindowBase::*)() const) &wxWindowBase::CanBeFocused, "C++: wxWindowBase::CanBeFocused() const --> bool");
		cl.def("IsFocusable", (bool (wxWindowBase::*)() const) &wxWindowBase::IsFocusable, "C++: wxWindowBase::IsFocusable() const --> bool");
		cl.def("CanAcceptFocus", (bool (wxWindowBase::*)() const) &wxWindowBase::CanAcceptFocus, "C++: wxWindowBase::CanAcceptFocus() const --> bool");
		cl.def("CanAcceptFocusFromKeyboard", (bool (wxWindowBase::*)() const) &wxWindowBase::CanAcceptFocusFromKeyboard, "C++: wxWindowBase::CanAcceptFocusFromKeyboard() const --> bool");
		cl.def("SetCanFocus", (void (wxWindowBase::*)(bool)) &wxWindowBase::SetCanFocus, "C++: wxWindowBase::SetCanFocus(bool) --> void", pybind11::arg(""));
		cl.def("NavigateIn", [](wxWindowBase &o) -> bool { return o.NavigateIn(); }, "");
		cl.def("NavigateIn", (bool (wxWindowBase::*)(int)) &wxWindowBase::NavigateIn, "C++: wxWindowBase::NavigateIn(int) --> bool", pybind11::arg("flags"));
		cl.def("Navigate", [](wxWindowBase &o) -> bool { return o.Navigate(); }, "");
		cl.def("Navigate", (bool (wxWindowBase::*)(int)) &wxWindowBase::Navigate, "C++: wxWindowBase::Navigate(int) --> bool", pybind11::arg("flags"));
		cl.def("HandleAsNavigationKey", (bool (wxWindowBase::*)(const class wxKeyEvent &)) &wxWindowBase::HandleAsNavigationKey, "C++: wxWindowBase::HandleAsNavigationKey(const class wxKeyEvent &) --> bool", pybind11::arg("event"));
		cl.def("MoveBeforeInTabOrder", (void (wxWindowBase::*)(class wxWindow *)) &wxWindowBase::MoveBeforeInTabOrder, "C++: wxWindowBase::MoveBeforeInTabOrder(class wxWindow *) --> void", pybind11::arg("win"));
		cl.def("MoveAfterInTabOrder", (void (wxWindowBase::*)(class wxWindow *)) &wxWindowBase::MoveAfterInTabOrder, "C++: wxWindowBase::MoveAfterInTabOrder(class wxWindow *) --> void", pybind11::arg("win"));
		cl.def("GetChildren", (class wxWindowList & (wxWindowBase::*)()) &wxWindowBase::GetChildren, "C++: wxWindowBase::GetChildren() --> class wxWindowList &", pybind11::return_value_policy::automatic);
		cl.def("GetWindowChildren", (const class wxWindowList & (wxWindowBase::*)() const) &wxWindowBase::GetWindowChildren, "C++: wxWindowBase::GetWindowChildren() const --> const class wxWindowList &", pybind11::return_value_policy::automatic);
		cl.def("GetPrevSibling", (class wxWindow * (wxWindowBase::*)() const) &wxWindowBase::GetPrevSibling, "C++: wxWindowBase::GetPrevSibling() const --> class wxWindow *", pybind11::return_value_policy::automatic);
		cl.def("GetNextSibling", (class wxWindow * (wxWindowBase::*)() const) &wxWindowBase::GetNextSibling, "C++: wxWindowBase::GetNextSibling() const --> class wxWindow *", pybind11::return_value_policy::automatic);
		cl.def("GetParent", (class wxWindow * (wxWindowBase::*)() const) &wxWindowBase::GetParent, "C++: wxWindowBase::GetParent() const --> class wxWindow *", pybind11::return_value_policy::automatic);
		cl.def("GetGrandParent", (class wxWindow * (wxWindowBase::*)() const) &wxWindowBase::GetGrandParent, "C++: wxWindowBase::GetGrandParent() const --> class wxWindow *", pybind11::return_value_policy::automatic);
		cl.def("IsTopLevel", (bool (wxWindowBase::*)() const) &wxWindowBase::IsTopLevel, "C++: wxWindowBase::IsTopLevel() const --> bool");
		cl.def("IsDescendant", (bool (wxWindowBase::*)(class wxWindowBase *) const) &wxWindowBase::IsDescendant, "C++: wxWindowBase::IsDescendant(class wxWindowBase *) const --> bool", pybind11::arg("win"));
		cl.def("SetParent", (void (wxWindowBase::*)(class wxWindowBase *)) &wxWindowBase::SetParent, "C++: wxWindowBase::SetParent(class wxWindowBase *) --> void", pybind11::arg("parent"));
		cl.def("Reparent", (bool (wxWindowBase::*)(class wxWindowBase *)) &wxWindowBase::Reparent, "C++: wxWindowBase::Reparent(class wxWindowBase *) --> bool", pybind11::arg("newParent"));
		cl.def("AddChild", (void (wxWindowBase::*)(class wxWindowBase *)) &wxWindowBase::AddChild, "C++: wxWindowBase::AddChild(class wxWindowBase *) --> void", pybind11::arg("child"));
		cl.def("RemoveChild", (void (wxWindowBase::*)(class wxWindowBase *)) &wxWindowBase::RemoveChild, "C++: wxWindowBase::RemoveChild(class wxWindowBase *) --> void", pybind11::arg("child"));
		cl.def("IsClientAreaChild", (bool (wxWindowBase::*)(const class wxWindow *) const) &wxWindowBase::IsClientAreaChild, "C++: wxWindowBase::IsClientAreaChild(const class wxWindow *) const --> bool", pybind11::arg(""));
		cl.def("FindWindow", (class wxWindow * (wxWindowBase::*)(long) const) &wxWindowBase::FindWindow, "C++: wxWindowBase::FindWindow(long) const --> class wxWindow *", pybind11::return_value_policy::automatic, pybind11::arg("winid"));
		cl.def("FindWindow", (class wxWindow * (wxWindowBase::*)(const class wxString &) const) &wxWindowBase::FindWindow, "C++: wxWindowBase::FindWindow(const class wxString &) const --> class wxWindow *", pybind11::return_value_policy::automatic, pybind11::arg("name"));
		cl.def_static("FindWindowById", [](long const & a0) -> wxWindow * { return wxWindowBase::FindWindowById(a0); }, "", pybind11::return_value_policy::automatic, pybind11::arg("winid"));
		cl.def_static("FindWindowById", (class wxWindow * (*)(long, const class wxWindow *)) &wxWindowBase::FindWindowById, "C++: wxWindowBase::FindWindowById(long, const class wxWindow *) --> class wxWindow *", pybind11::return_value_policy::automatic, pybind11::arg("winid"), pybind11::arg("parent"));
		cl.def_static("FindWindowByName", [](const class wxString & a0) -> wxWindow * { return wxWindowBase::FindWindowByName(a0); }, "", pybind11::return_value_policy::automatic, pybind11::arg("name"));
		cl.def_static("FindWindowByName", (class wxWindow * (*)(const class wxString &, const class wxWindow *)) &wxWindowBase::FindWindowByName, "C++: wxWindowBase::FindWindowByName(const class wxString &, const class wxWindow *) --> class wxWindow *", pybind11::return_value_policy::automatic, pybind11::arg("name"), pybind11::arg("parent"));
		cl.def_static("FindWindowByLabel", [](const class wxString & a0) -> wxWindow * { return wxWindowBase::FindWindowByLabel(a0); }, "", pybind11::return_value_policy::automatic, pybind11::arg("label"));
		cl.def_static("FindWindowByLabel", (class wxWindow * (*)(const class wxString &, const class wxWindow *)) &wxWindowBase::FindWindowByLabel, "C++: wxWindowBase::FindWindowByLabel(const class wxString &, const class wxWindow *) --> class wxWindow *", pybind11::return_value_policy::automatic, pybind11::arg("label"), pybind11::arg("parent"));
		cl.def("GetEventHandler", (class wxEvtHandler * (wxWindowBase::*)() const) &wxWindowBase::GetEventHandler, "C++: wxWindowBase::GetEventHandler() const --> class wxEvtHandler *", pybind11::return_value_policy::automatic);
		cl.def("SetEventHandler", (void (wxWindowBase::*)(class wxEvtHandler *)) &wxWindowBase::SetEventHandler, "C++: wxWindowBase::SetEventHandler(class wxEvtHandler *) --> void", pybind11::arg("handler"));
		cl.def("PushEventHandler", (void (wxWindowBase::*)(class wxEvtHandler *)) &wxWindowBase::PushEventHandler, "C++: wxWindowBase::PushEventHandler(class wxEvtHandler *) --> void", pybind11::arg("handler"));
		cl.def("PopEventHandler", [](wxWindowBase &o) -> wxEvtHandler * { return o.PopEventHandler(); }, "", pybind11::return_value_policy::automatic);
		cl.def("PopEventHandler", (class wxEvtHandler * (wxWindowBase::*)(bool)) &wxWindowBase::PopEventHandler, "C++: wxWindowBase::PopEventHandler(bool) --> class wxEvtHandler *", pybind11::return_value_policy::automatic, pybind11::arg("deleteHandler"));
		cl.def("RemoveEventHandler", (bool (wxWindowBase::*)(class wxEvtHandler *)) &wxWindowBase::RemoveEventHandler, "C++: wxWindowBase::RemoveEventHandler(class wxEvtHandler *) --> bool", pybind11::arg("handler"));
		cl.def("ProcessWindowEvent", (bool (wxWindowBase::*)(class wxEvent &)) &wxWindowBase::ProcessWindowEvent, "C++: wxWindowBase::ProcessWindowEvent(class wxEvent &) --> bool", pybind11::arg("event"));
		cl.def("ProcessWindowEventLocally", (bool (wxWindowBase::*)(class wxEvent &)) &wxWindowBase::ProcessWindowEventLocally, "C++: wxWindowBase::ProcessWindowEventLocally(class wxEvent &) --> bool", pybind11::arg("event"));
		cl.def("HandleWindowEvent", (bool (wxWindowBase::*)(class wxEvent &) const) &wxWindowBase::HandleWindowEvent, "C++: wxWindowBase::HandleWindowEvent(class wxEvent &) const --> bool", pybind11::arg("event"));
		cl.def("SetNextHandler", (void (wxWindowBase::*)(class wxEvtHandler *)) &wxWindowBase::SetNextHandler, "C++: wxWindowBase::SetNextHandler(class wxEvtHandler *) --> void", pybind11::arg("handler"));
		cl.def("SetPreviousHandler", (void (wxWindowBase::*)(class wxEvtHandler *)) &wxWindowBase::SetPreviousHandler, "C++: wxWindowBase::SetPreviousHandler(class wxEvtHandler *) --> void", pybind11::arg("handler"));
		cl.def("SetValidator", (void (wxWindowBase::*)(const class wxValidator &)) &wxWindowBase::SetValidator, "C++: wxWindowBase::SetValidator(const class wxValidator &) --> void", pybind11::arg("validator"));
		cl.def("GetValidator", (class wxValidator * (wxWindowBase::*)()) &wxWindowBase::GetValidator, "C++: wxWindowBase::GetValidator() --> class wxValidator *", pybind11::return_value_policy::automatic);
		cl.def("Validate", (bool (wxWindowBase::*)()) &wxWindowBase::Validate, "C++: wxWindowBase::Validate() --> bool");
		cl.def("TransferDataToWindow", (bool (wxWindowBase::*)()) &wxWindowBase::TransferDataToWindow, "C++: wxWindowBase::TransferDataToWindow() --> bool");
		cl.def("TransferDataFromWindow", (bool (wxWindowBase::*)()) &wxWindowBase::TransferDataFromWindow, "C++: wxWindowBase::TransferDataFromWindow() --> bool");
		cl.def("InitDialog", (void (wxWindowBase::*)()) &wxWindowBase::InitDialog, "C++: wxWindowBase::InitDialog() --> void");
		cl.def("SetAcceleratorTable", (void (wxWindowBase::*)(const class wxAcceleratorTable &)) &wxWindowBase::SetAcceleratorTable, "C++: wxWindowBase::SetAcceleratorTable(const class wxAcceleratorTable &) --> void", pybind11::arg("accel"));
		cl.def("GetAcceleratorTable", (class wxAcceleratorTable * (wxWindowBase::*)()) &wxWindowBase::GetAcceleratorTable, "C++: wxWindowBase::GetAcceleratorTable() --> class wxAcceleratorTable *", pybind11::return_value_policy::automatic);
		cl.def("ConvertPixelsToDialog", (class wxPoint (wxWindowBase::*)(const class wxPoint &) const) &wxWindowBase::ConvertPixelsToDialog, "C++: wxWindowBase::ConvertPixelsToDialog(const class wxPoint &) const --> class wxPoint", pybind11::arg("pt"));
		cl.def("ConvertDialogToPixels", (class wxPoint (wxWindowBase::*)(const class wxPoint &) const) &wxWindowBase::ConvertDialogToPixels, "C++: wxWindowBase::ConvertDialogToPixels(const class wxPoint &) const --> class wxPoint", pybind11::arg("pt"));
		cl.def("ConvertPixelsToDialog", (class wxSize (wxWindowBase::*)(const class wxSize &) const) &wxWindowBase::ConvertPixelsToDialog, "C++: wxWindowBase::ConvertPixelsToDialog(const class wxSize &) const --> class wxSize", pybind11::arg("sz"));
		cl.def("ConvertDialogToPixels", (class wxSize (wxWindowBase::*)(const class wxSize &) const) &wxWindowBase::ConvertDialogToPixels, "C++: wxWindowBase::ConvertDialogToPixels(const class wxSize &) const --> class wxSize", pybind11::arg("sz"));
		cl.def("WarpPointer", (void (wxWindowBase::*)(int, int)) &wxWindowBase::WarpPointer, "C++: wxWindowBase::WarpPointer(int, int) --> void", pybind11::arg("x"), pybind11::arg("y"));
		cl.def("CaptureMouse", (void (wxWindowBase::*)()) &wxWindowBase::CaptureMouse, "C++: wxWindowBase::CaptureMouse() --> void");
		cl.def("ReleaseMouse", (void (wxWindowBase::*)()) &wxWindowBase::ReleaseMouse, "C++: wxWindowBase::ReleaseMouse() --> void");
		cl.def_static("GetCapture", (class wxWindow * (*)()) &wxWindowBase::GetCapture, "C++: wxWindowBase::GetCapture() --> class wxWindow *", pybind11::return_value_policy::automatic);
		cl.def("HasCapture", (bool (wxWindowBase::*)() const) &wxWindowBase::HasCapture, "C++: wxWindowBase::HasCapture() const --> bool");
		cl.def("Refresh", [](wxWindowBase &o) -> void { return o.Refresh(); }, "");
		cl.def("Refresh", [](wxWindowBase &o, bool const & a0) -> void { return o.Refresh(a0); }, "", pybind11::arg("eraseBackground"));
		cl.def("Refresh", (void (wxWindowBase::*)(bool, const class wxRect *)) &wxWindowBase::Refresh, "C++: wxWindowBase::Refresh(bool, const class wxRect *) --> void", pybind11::arg("eraseBackground"), pybind11::arg("rect"));
		cl.def("RefreshRect", [](wxWindowBase &o, const class wxRect & a0) -> void { return o.RefreshRect(a0); }, "", pybind11::arg("rect"));
		cl.def("RefreshRect", (void (wxWindowBase::*)(const class wxRect &, bool)) &wxWindowBase::RefreshRect, "C++: wxWindowBase::RefreshRect(const class wxRect &, bool) --> void", pybind11::arg("rect"), pybind11::arg("eraseBackground"));
		cl.def("Update", (void (wxWindowBase::*)()) &wxWindowBase::Update, "C++: wxWindowBase::Update() --> void");
		cl.def("ClearBackground", (void (wxWindowBase::*)()) &wxWindowBase::ClearBackground, "C++: wxWindowBase::ClearBackground() --> void");
		cl.def("Freeze", (void (wxWindowBase::*)()) &wxWindowBase::Freeze, "C++: wxWindowBase::Freeze() --> void");
		cl.def("Thaw", (void (wxWindowBase::*)()) &wxWindowBase::Thaw, "C++: wxWindowBase::Thaw() --> void");
		cl.def("IsFrozen", (bool (wxWindowBase::*)() const) &wxWindowBase::IsFrozen, "C++: wxWindowBase::IsFrozen() const --> bool");
		cl.def("PrepareDC", (void (wxWindowBase::*)(class wxDC &)) &wxWindowBase::PrepareDC, "C++: wxWindowBase::PrepareDC(class wxDC &) --> void", pybind11::arg(""));
		cl.def("IsDoubleBuffered", (bool (wxWindowBase::*)() const) &wxWindowBase::IsDoubleBuffered, "C++: wxWindowBase::IsDoubleBuffered() const --> bool");
		cl.def("GetUpdateRegion", (class wxRegion & (wxWindowBase::*)()) &wxWindowBase::GetUpdateRegion, "C++: wxWindowBase::GetUpdateRegion() --> class wxRegion &", pybind11::return_value_policy::automatic);
		cl.def("GetUpdateClientRect", (class wxRect (wxWindowBase::*)() const) &wxWindowBase::GetUpdateClientRect, "C++: wxWindowBase::GetUpdateClientRect() const --> class wxRect");
		cl.def("DoIsExposed", (bool (wxWindowBase::*)(int, int) const) &wxWindowBase::DoIsExposed, "C++: wxWindowBase::DoIsExposed(int, int) const --> bool", pybind11::arg("x"), pybind11::arg("y"));
		cl.def("DoIsExposed", (bool (wxWindowBase::*)(int, int, int, int) const) &wxWindowBase::DoIsExposed, "C++: wxWindowBase::DoIsExposed(int, int, int, int) const --> bool", pybind11::arg("x"), pybind11::arg("y"), pybind11::arg("w"), pybind11::arg("h"));
		cl.def("IsExposed", (bool (wxWindowBase::*)(int, int) const) &wxWindowBase::IsExposed, "C++: wxWindowBase::IsExposed(int, int) const --> bool", pybind11::arg("x"), pybind11::arg("y"));
		cl.def("IsExposed", (bool (wxWindowBase::*)(int, int, int, int) const) &wxWindowBase::IsExposed, "C++: wxWindowBase::IsExposed(int, int, int, int) const --> bool", pybind11::arg("x"), pybind11::arg("y"), pybind11::arg("w"), pybind11::arg("h"));
		cl.def("IsExposed", (bool (wxWindowBase::*)(const class wxPoint &) const) &wxWindowBase::IsExposed, "C++: wxWindowBase::IsExposed(const class wxPoint &) const --> bool", pybind11::arg("pt"));
		cl.def("IsExposed", (bool (wxWindowBase::*)(const class wxRect &) const) &wxWindowBase::IsExposed, "C++: wxWindowBase::IsExposed(const class wxRect &) const --> bool", pybind11::arg("rect"));
		cl.def("GetDefaultAttributes", (struct wxVisualAttributes (wxWindowBase::*)() const) &wxWindowBase::GetDefaultAttributes, "C++: wxWindowBase::GetDefaultAttributes() const --> struct wxVisualAttributes");
		cl.def_static("GetClassDefaultAttributes", []() -> wxVisualAttributes { return wxWindowBase::GetClassDefaultAttributes(); }, "");
		cl.def_static("GetClassDefaultAttributes", (struct wxVisualAttributes (*)(enum wxWindowVariant)) &wxWindowBase::GetClassDefaultAttributes, "C++: wxWindowBase::GetClassDefaultAttributes(enum wxWindowVariant) --> struct wxVisualAttributes", pybind11::arg("variant"));
		cl.def("SetBackgroundColour", (bool (wxWindowBase::*)(const class wxColour &)) &wxWindowBase::SetBackgroundColour, "C++: wxWindowBase::SetBackgroundColour(const class wxColour &) --> bool", pybind11::arg("colour"));
		cl.def("SetOwnBackgroundColour", (void (wxWindowBase::*)(const class wxColour &)) &wxWindowBase::SetOwnBackgroundColour, "C++: wxWindowBase::SetOwnBackgroundColour(const class wxColour &) --> void", pybind11::arg("colour"));
		cl.def("GetBackgroundColour", (class wxColour (wxWindowBase::*)() const) &wxWindowBase::GetBackgroundColour, "C++: wxWindowBase::GetBackgroundColour() const --> class wxColour");
		cl.def("InheritsBackgroundColour", (bool (wxWindowBase::*)() const) &wxWindowBase::InheritsBackgroundColour, "C++: wxWindowBase::InheritsBackgroundColour() const --> bool");
		cl.def("UseBgCol", (bool (wxWindowBase::*)() const) &wxWindowBase::UseBgCol, "C++: wxWindowBase::UseBgCol() const --> bool");
		cl.def("SetForegroundColour", (bool (wxWindowBase::*)(const class wxColour &)) &wxWindowBase::SetForegroundColour, "C++: wxWindowBase::SetForegroundColour(const class wxColour &) --> bool", pybind11::arg("colour"));
		cl.def("SetOwnForegroundColour", (void (wxWindowBase::*)(const class wxColour &)) &wxWindowBase::SetOwnForegroundColour, "C++: wxWindowBase::SetOwnForegroundColour(const class wxColour &) --> void", pybind11::arg("colour"));
		cl.def("GetForegroundColour", (class wxColour (wxWindowBase::*)() const) &wxWindowBase::GetForegroundColour, "C++: wxWindowBase::GetForegroundColour() const --> class wxColour");
		cl.def("SetBackgroundStyle", (bool (wxWindowBase::*)(enum wxBackgroundStyle)) &wxWindowBase::SetBackgroundStyle, "C++: wxWindowBase::SetBackgroundStyle(enum wxBackgroundStyle) --> bool", pybind11::arg("style"));
		cl.def("GetBackgroundStyle", (enum wxBackgroundStyle (wxWindowBase::*)() const) &wxWindowBase::GetBackgroundStyle, "C++: wxWindowBase::GetBackgroundStyle() const --> enum wxBackgroundStyle");
		cl.def("HasTransparentBackground", (bool (wxWindowBase::*)()) &wxWindowBase::HasTransparentBackground, "C++: wxWindowBase::HasTransparentBackground() --> bool");
		cl.def("IsTransparentBackgroundSupported", [](wxWindowBase const &o) -> bool { return o.IsTransparentBackgroundSupported(); }, "");
		cl.def("IsTransparentBackgroundSupported", (bool (wxWindowBase::*)(class wxString *) const) &wxWindowBase::IsTransparentBackgroundSupported, "C++: wxWindowBase::IsTransparentBackgroundSupported(class wxString *) const --> bool", pybind11::arg("reason"));
		cl.def("SetFont", (bool (wxWindowBase::*)(const class wxFont &)) &wxWindowBase::SetFont, "C++: wxWindowBase::SetFont(const class wxFont &) --> bool", pybind11::arg("font"));
		cl.def("SetOwnFont", (void (wxWindowBase::*)(const class wxFont &)) &wxWindowBase::SetOwnFont, "C++: wxWindowBase::SetOwnFont(const class wxFont &) --> void", pybind11::arg("font"));
		cl.def("GetFont", (class wxFont (wxWindowBase::*)() const) &wxWindowBase::GetFont, "C++: wxWindowBase::GetFont() const --> class wxFont");
		cl.def("SetCursor", (bool (wxWindowBase::*)(const class wxCursor &)) &wxWindowBase::SetCursor, "C++: wxWindowBase::SetCursor(const class wxCursor &) --> bool", pybind11::arg("cursor"));
		cl.def("GetCursor", (const class wxCursor & (wxWindowBase::*)() const) &wxWindowBase::GetCursor, "C++: wxWindowBase::GetCursor() const --> const class wxCursor &", pybind11::return_value_policy::automatic);
		cl.def("GetCharHeight", (int (wxWindowBase::*)() const) &wxWindowBase::GetCharHeight, "C++: wxWindowBase::GetCharHeight() const --> int");
		cl.def("GetCharWidth", (int (wxWindowBase::*)() const) &wxWindowBase::GetCharWidth, "C++: wxWindowBase::GetCharWidth() const --> int");
		cl.def("GetTextExtent", [](wxWindowBase const &o, const class wxString & a0, int * a1, int * a2) -> void { return o.GetTextExtent(a0, a1, a2); }, "", pybind11::arg("string"), pybind11::arg("x"), pybind11::arg("y"));
		cl.def("GetTextExtent", [](wxWindowBase const &o, const class wxString & a0, int * a1, int * a2, int * a3) -> void { return o.GetTextExtent(a0, a1, a2, a3); }, "", pybind11::arg("string"), pybind11::arg("x"), pybind11::arg("y"), pybind11::arg("descent"));
		cl.def("GetTextExtent", [](wxWindowBase const &o, const class wxString & a0, int * a1, int * a2, int * a3, int * a4) -> void { return o.GetTextExtent(a0, a1, a2, a3, a4); }, "", pybind11::arg("string"), pybind11::arg("x"), pybind11::arg("y"), pybind11::arg("descent"), pybind11::arg("externalLeading"));
		cl.def("GetTextExtent", (void (wxWindowBase::*)(const class wxString &, int *, int *, int *, int *, const class wxFont *) const) &wxWindowBase::GetTextExtent, "C++: wxWindowBase::GetTextExtent(const class wxString &, int *, int *, int *, int *, const class wxFont *) const --> void", pybind11::arg("string"), pybind11::arg("x"), pybind11::arg("y"), pybind11::arg("descent"), pybind11::arg("externalLeading"), pybind11::arg("font"));
		cl.def("GetTextExtent", (class wxSize (wxWindowBase::*)(const class wxString &) const) &wxWindowBase::GetTextExtent, "C++: wxWindowBase::GetTextExtent(const class wxString &) const --> class wxSize", pybind11::arg("string"));
		cl.def("ClientToScreen", (void (wxWindowBase::*)(int *, int *) const) &wxWindowBase::ClientToScreen, "C++: wxWindowBase::ClientToScreen(int *, int *) const --> void", pybind11::arg("x"), pybind11::arg("y"));
		cl.def("ScreenToClient", (void (wxWindowBase::*)(int *, int *) const) &wxWindowBase::ScreenToClient, "C++: wxWindowBase::ScreenToClient(int *, int *) const --> void", pybind11::arg("x"), pybind11::arg("y"));
		cl.def("ClientToScreen", (class wxPoint (wxWindowBase::*)(const class wxPoint &) const) &wxWindowBase::ClientToScreen, "C++: wxWindowBase::ClientToScreen(const class wxPoint &) const --> class wxPoint", pybind11::arg("pt"));
		cl.def("ScreenToClient", (class wxPoint (wxWindowBase::*)(const class wxPoint &) const) &wxWindowBase::ScreenToClient, "C++: wxWindowBase::ScreenToClient(const class wxPoint &) const --> class wxPoint", pybind11::arg("pt"));
		cl.def("HitTest", (enum wxHitTest (wxWindowBase::*)(int, int) const) &wxWindowBase::HitTest, "C++: wxWindowBase::HitTest(int, int) const --> enum wxHitTest", pybind11::arg("x"), pybind11::arg("y"));
		cl.def("HitTest", (enum wxHitTest (wxWindowBase::*)(const class wxPoint &) const) &wxWindowBase::HitTest, "C++: wxWindowBase::HitTest(const class wxPoint &) const --> enum wxHitTest", pybind11::arg("pt"));
		cl.def("GetBorder", (enum wxBorder (wxWindowBase::*)(long) const) &wxWindowBase::GetBorder, "C++: wxWindowBase::GetBorder(long) const --> enum wxBorder", pybind11::arg("flags"));
		cl.def("GetBorder", (enum wxBorder (wxWindowBase::*)() const) &wxWindowBase::GetBorder, "C++: wxWindowBase::GetBorder() const --> enum wxBorder");
		cl.def("UpdateWindowUI", [](wxWindowBase &o) -> void { return o.UpdateWindowUI(); }, "");
		cl.def("UpdateWindowUI", (void (wxWindowBase::*)(long)) &wxWindowBase::UpdateWindowUI, "C++: wxWindowBase::UpdateWindowUI(long) --> void", pybind11::arg("flags"));
		cl.def("DoUpdateWindowUI", (void (wxWindowBase::*)(class wxUpdateUIEvent &)) &wxWindowBase::DoUpdateWindowUI, "C++: wxWindowBase::DoUpdateWindowUI(class wxUpdateUIEvent &) --> void", pybind11::arg("event"));
		cl.def("HasMultiplePages", (bool (wxWindowBase::*)() const) &wxWindowBase::HasMultiplePages, "C++: wxWindowBase::HasMultiplePages() const --> bool");
		cl.def("CanScroll", (bool (wxWindowBase::*)(int) const) &wxWindowBase::CanScroll, "C++: wxWindowBase::CanScroll(int) const --> bool", pybind11::arg("orient"));
		cl.def("HasScrollbar", (bool (wxWindowBase::*)(int) const) &wxWindowBase::HasScrollbar, "C++: wxWindowBase::HasScrollbar(int) const --> bool", pybind11::arg("orient"));
		cl.def("SetScrollbar", [](wxWindowBase &o, int const & a0, int const & a1, int const & a2, int const & a3) -> void { return o.SetScrollbar(a0, a1, a2, a3); }, "", pybind11::arg("orient"), pybind11::arg("pos"), pybind11::arg("thumbvisible"), pybind11::arg("range"));
		cl.def("SetScrollbar", (void (wxWindowBase::*)(int, int, int, int, bool)) &wxWindowBase::SetScrollbar, "C++: wxWindowBase::SetScrollbar(int, int, int, int, bool) --> void", pybind11::arg("orient"), pybind11::arg("pos"), pybind11::arg("thumbvisible"), pybind11::arg("range"), pybind11::arg("refresh"));
		cl.def("SetScrollPos", [](wxWindowBase &o, int const & a0, int const & a1) -> void { return o.SetScrollPos(a0, a1); }, "", pybind11::arg("orient"), pybind11::arg("pos"));
		cl.def("SetScrollPos", (void (wxWindowBase::*)(int, int, bool)) &wxWindowBase::SetScrollPos, "C++: wxWindowBase::SetScrollPos(int, int, bool) --> void", pybind11::arg("orient"), pybind11::arg("pos"), pybind11::arg("refresh"));
		cl.def("GetScrollPos", (int (wxWindowBase::*)(int) const) &wxWindowBase::GetScrollPos, "C++: wxWindowBase::GetScrollPos(int) const --> int", pybind11::arg("orient"));
		cl.def("GetScrollThumb", (int (wxWindowBase::*)(int) const) &wxWindowBase::GetScrollThumb, "C++: wxWindowBase::GetScrollThumb(int) const --> int", pybind11::arg("orient"));
		cl.def("GetScrollRange", (int (wxWindowBase::*)(int) const) &wxWindowBase::GetScrollRange, "C++: wxWindowBase::GetScrollRange(int) const --> int", pybind11::arg("orient"));
		cl.def("ScrollWindow", [](wxWindowBase &o, int const & a0, int const & a1) -> void { return o.ScrollWindow(a0, a1); }, "", pybind11::arg("dx"), pybind11::arg("dy"));
		cl.def("ScrollWindow", (void (wxWindowBase::*)(int, int, const class wxRect *)) &wxWindowBase::ScrollWindow, "C++: wxWindowBase::ScrollWindow(int, int, const class wxRect *) --> void", pybind11::arg("dx"), pybind11::arg("dy"), pybind11::arg("rect"));
		cl.def("ScrollLines", (bool (wxWindowBase::*)(int)) &wxWindowBase::ScrollLines, "C++: wxWindowBase::ScrollLines(int) --> bool", pybind11::arg(""));
		cl.def("ScrollPages", (bool (wxWindowBase::*)(int)) &wxWindowBase::ScrollPages, "C++: wxWindowBase::ScrollPages(int) --> bool", pybind11::arg(""));
		cl.def("LineUp", (bool (wxWindowBase::*)()) &wxWindowBase::LineUp, "C++: wxWindowBase::LineUp() --> bool");
		cl.def("LineDown", (bool (wxWindowBase::*)()) &wxWindowBase::LineDown, "C++: wxWindowBase::LineDown() --> bool");
		cl.def("PageUp", (bool (wxWindowBase::*)()) &wxWindowBase::PageUp, "C++: wxWindowBase::PageUp() --> bool");
		cl.def("PageDown", (bool (wxWindowBase::*)()) &wxWindowBase::PageDown, "C++: wxWindowBase::PageDown() --> bool");
		cl.def("AlwaysShowScrollbars", [](wxWindowBase &o) -> void { return o.AlwaysShowScrollbars(); }, "");
		cl.def("AlwaysShowScrollbars", [](wxWindowBase &o, bool const & a0) -> void { return o.AlwaysShowScrollbars(a0); }, "", pybind11::arg(""));
		cl.def("AlwaysShowScrollbars", (void (wxWindowBase::*)(bool, bool)) &wxWindowBase::AlwaysShowScrollbars, "C++: wxWindowBase::AlwaysShowScrollbars(bool, bool) --> void", pybind11::arg(""), pybind11::arg(""));
		cl.def("IsScrollbarAlwaysShown", (bool (wxWindowBase::*)(int) const) &wxWindowBase::IsScrollbarAlwaysShown, "C++: wxWindowBase::IsScrollbarAlwaysShown(int) const --> bool", pybind11::arg(""));
		cl.def("SetHelpText", (void (wxWindowBase::*)(const class wxString &)) &wxWindowBase::SetHelpText, "C++: wxWindowBase::SetHelpText(const class wxString &) --> void", pybind11::arg("text"));
		cl.def("SetHelpTextForId", (void (wxWindowBase::*)(const class wxString &)) &wxWindowBase::SetHelpTextForId, "C++: wxWindowBase::SetHelpTextForId(const class wxString &) --> void", pybind11::arg("text"));
		cl.def("GetHelpTextAtPoint", (class wxString (wxWindowBase::*)(const class wxPoint &, enum wxHelpEvent::Origin) const) &wxWindowBase::GetHelpTextAtPoint, "C++: wxWindowBase::GetHelpTextAtPoint(const class wxPoint &, enum wxHelpEvent::Origin) const --> class wxString", pybind11::arg("pt"), pybind11::arg("origin"));
		cl.def("GetHelpText", (class wxString (wxWindowBase::*)() const) &wxWindowBase::GetHelpText, "C++: wxWindowBase::GetHelpText() const --> class wxString");
		cl.def("SetToolTip", (void (wxWindowBase::*)(const class wxString &)) &wxWindowBase::SetToolTip, "C++: wxWindowBase::SetToolTip(const class wxString &) --> void", pybind11::arg("tip"));
		cl.def("UnsetToolTip", (void (wxWindowBase::*)()) &wxWindowBase::UnsetToolTip, "C++: wxWindowBase::UnsetToolTip() --> void");
		cl.def("GetToolTipText", (class wxString (wxWindowBase::*)() const) &wxWindowBase::GetToolTipText, "C++: wxWindowBase::GetToolTipText() const --> class wxString");
		cl.def("DragAcceptFiles", (void (wxWindowBase::*)(bool)) &wxWindowBase::DragAcceptFiles, "C++: wxWindowBase::DragAcceptFiles(bool) --> void", pybind11::arg("accept"));
		cl.def("GetConstraintsInvolvedIn", (class wxWindowList * (wxWindowBase::*)() const) &wxWindowBase::GetConstraintsInvolvedIn, "C++: wxWindowBase::GetConstraintsInvolvedIn() const --> class wxWindowList *", pybind11::return_value_policy::automatic);
		cl.def("AddConstraintReference", (void (wxWindowBase::*)(class wxWindowBase *)) &wxWindowBase::AddConstraintReference, "C++: wxWindowBase::AddConstraintReference(class wxWindowBase *) --> void", pybind11::arg("otherWin"));
		cl.def("RemoveConstraintReference", (void (wxWindowBase::*)(class wxWindowBase *)) &wxWindowBase::RemoveConstraintReference, "C++: wxWindowBase::RemoveConstraintReference(class wxWindowBase *) --> void", pybind11::arg("otherWin"));
		cl.def("DeleteRelatedConstraints", (void (wxWindowBase::*)()) &wxWindowBase::DeleteRelatedConstraints, "C++: wxWindowBase::DeleteRelatedConstraints() --> void");
		cl.def("ResetConstraints", (void (wxWindowBase::*)()) &wxWindowBase::ResetConstraints, "C++: wxWindowBase::ResetConstraints() --> void");
		cl.def("SetConstraintSizes", [](wxWindowBase &o) -> void { return o.SetConstraintSizes(); }, "");
		cl.def("SetConstraintSizes", (void (wxWindowBase::*)(bool)) &wxWindowBase::SetConstraintSizes, "C++: wxWindowBase::SetConstraintSizes(bool) --> void", pybind11::arg("recurse"));
		cl.def("LayoutPhase1", (bool (wxWindowBase::*)(int *)) &wxWindowBase::LayoutPhase1, "C++: wxWindowBase::LayoutPhase1(int *) --> bool", pybind11::arg("noChanges"));
		cl.def("LayoutPhase2", (bool (wxWindowBase::*)(int *)) &wxWindowBase::LayoutPhase2, "C++: wxWindowBase::LayoutPhase2(int *) --> bool", pybind11::arg("noChanges"));
		cl.def("DoPhase", (bool (wxWindowBase::*)(int)) &wxWindowBase::DoPhase, "C++: wxWindowBase::DoPhase(int) --> bool", pybind11::arg("phase"));
		cl.def("SetSizeConstraint", (void (wxWindowBase::*)(int, int, int, int)) &wxWindowBase::SetSizeConstraint, "C++: wxWindowBase::SetSizeConstraint(int, int, int, int) --> void", pybind11::arg("x"), pybind11::arg("y"), pybind11::arg("w"), pybind11::arg("h"));
		cl.def("MoveConstraint", (void (wxWindowBase::*)(int, int)) &wxWindowBase::MoveConstraint, "C++: wxWindowBase::MoveConstraint(int, int) --> void", pybind11::arg("x"), pybind11::arg("y"));
		cl.def("GetSizeConstraint", (void (wxWindowBase::*)(int *, int *) const) &wxWindowBase::GetSizeConstraint, "C++: wxWindowBase::GetSizeConstraint(int *, int *) const --> void", pybind11::arg("w"), pybind11::arg("h"));
		cl.def("GetClientSizeConstraint", (void (wxWindowBase::*)(int *, int *) const) &wxWindowBase::GetClientSizeConstraint, "C++: wxWindowBase::GetClientSizeConstraint(int *, int *) const --> void", pybind11::arg("w"), pybind11::arg("h"));
		cl.def("GetPositionConstraint", (void (wxWindowBase::*)(int *, int *) const) &wxWindowBase::GetPositionConstraint, "C++: wxWindowBase::GetPositionConstraint(int *, int *) const --> void", pybind11::arg("x"), pybind11::arg("y"));
		cl.def("SetAutoLayout", (void (wxWindowBase::*)(bool)) &wxWindowBase::SetAutoLayout, "C++: wxWindowBase::SetAutoLayout(bool) --> void", pybind11::arg("autoLayout"));
		cl.def("GetAutoLayout", (bool (wxWindowBase::*)() const) &wxWindowBase::GetAutoLayout, "C++: wxWindowBase::GetAutoLayout() const --> bool");
		cl.def("Layout", (bool (wxWindowBase::*)()) &wxWindowBase::Layout, "C++: wxWindowBase::Layout() --> bool");
		cl.def("SetTransparent", (bool (wxWindowBase::*)(unsigned char)) &wxWindowBase::SetTransparent, "C++: wxWindowBase::SetTransparent(unsigned char) --> bool", pybind11::arg(""));
		cl.def("CanSetTransparent", (bool (wxWindowBase::*)()) &wxWindowBase::CanSetTransparent, "C++: wxWindowBase::CanSetTransparent() --> bool");
		cl.def("OnSysColourChanged", (void (wxWindowBase::*)(class wxSysColourChangedEvent &)) &wxWindowBase::OnSysColourChanged, "C++: wxWindowBase::OnSysColourChanged(class wxSysColourChangedEvent &) --> void", pybind11::arg("event"));
		cl.def("OnInitDialog", (void (wxWindowBase::*)(class wxInitDialogEvent &)) &wxWindowBase::OnInitDialog, "C++: wxWindowBase::OnInitDialog(class wxInitDialogEvent &) --> void", pybind11::arg("event"));
		cl.def("OnMiddleClick", (void (wxWindowBase::*)(class wxMouseEvent &)) &wxWindowBase::OnMiddleClick, "C++: wxWindowBase::OnMiddleClick(class wxMouseEvent &) --> void", pybind11::arg("event"));
		cl.def("OnHelp", (void (wxWindowBase::*)(class wxHelpEvent &)) &wxWindowBase::OnHelp, "C++: wxWindowBase::OnHelp(class wxHelpEvent &) --> void", pybind11::arg("event"));
		cl.def("OnInternalIdle", (void (wxWindowBase::*)()) &wxWindowBase::OnInternalIdle, "C++: wxWindowBase::OnInternalIdle() --> void");
		cl.def("SendIdleEvents", (bool (wxWindowBase::*)(class wxIdleEvent &)) &wxWindowBase::SendIdleEvents, "C++: wxWindowBase::SendIdleEvents(class wxIdleEvent &) --> bool", pybind11::arg("event"));
		cl.def("GetHandle", (int (wxWindowBase::*)() const) &wxWindowBase::GetHandle, "C++: wxWindowBase::GetHandle() const --> int");
		cl.def("AssociateHandle", (void (wxWindowBase::*)(int)) &wxWindowBase::AssociateHandle, "C++: wxWindowBase::AssociateHandle(int) --> void", pybind11::arg(""));
		cl.def("DissociateHandle", (void (wxWindowBase::*)()) &wxWindowBase::DissociateHandle, "C++: wxWindowBase::DissociateHandle() --> void");
		cl.def("HasCustomPalette", (bool (wxWindowBase::*)() const) &wxWindowBase::HasCustomPalette, "C++: wxWindowBase::HasCustomPalette() const --> bool");
		cl.def("GetAncestorWithCustomPalette", (class wxWindow * (wxWindowBase::*)() const) &wxWindowBase::GetAncestorWithCustomPalette, "C++: wxWindowBase::GetAncestorWithCustomPalette() const --> class wxWindow *", pybind11::return_value_policy::automatic);
		cl.def("InheritAttributes", (void (wxWindowBase::*)()) &wxWindowBase::InheritAttributes, "C++: wxWindowBase::InheritAttributes() --> void");
		cl.def("ShouldInheritColours", (bool (wxWindowBase::*)() const) &wxWindowBase::ShouldInheritColours, "C++: wxWindowBase::ShouldInheritColours() const --> bool");
		cl.def("CanBeOutsideClientArea", (bool (wxWindowBase::*)() const) &wxWindowBase::CanBeOutsideClientArea, "C++: wxWindowBase::CanBeOutsideClientArea() const --> bool");
		cl.def("CanApplyThemeBorder", (bool (wxWindowBase::*)() const) &wxWindowBase::CanApplyThemeBorder, "C++: wxWindowBase::CanApplyThemeBorder() const --> bool");
		cl.def("GetMainWindowOfCompositeControl", (class wxWindow * (wxWindowBase::*)()) &wxWindowBase::GetMainWindowOfCompositeControl, "C++: wxWindowBase::GetMainWindowOfCompositeControl() --> class wxWindow *", pybind11::return_value_policy::automatic);
		cl.def("IsTopNavigationDomain", (bool (wxWindowBase::*)() const) &wxWindowBase::IsTopNavigationDomain, "C++: wxWindowBase::IsTopNavigationDomain() const --> bool");
		cl.def("GetClassInfo", (class wxClassInfo * (wxWindowBase::*)() const) &wxWindowBase::GetClassInfo, "C++: wxWindowBase::GetClassInfo() const --> class wxClassInfo *", pybind11::return_value_policy::automatic);

		{ // wxWindowBase::ChildrenRepositioningGuard file: line:587
			auto & enclosing_class = cl;
			pybind11::class_<wxWindowBase::ChildrenRepositioningGuard, std::shared_ptr<wxWindowBase::ChildrenRepositioningGuard>> cl(enclosing_class, "ChildrenRepositioningGuard", "");
			cl.def( pybind11::init<class wxWindowBase *>(), pybind11::arg("win") );

		}

	}
}
